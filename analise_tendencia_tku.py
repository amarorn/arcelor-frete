#!/usr/bin/env python3
"""
An√°lise de Tend√™ncia de Pre√ßos TKU por Micro-regi√£o
Gera relat√≥rios de tend√™ncia para todas as micro-regi√µes
"""

import os
import time
import logging
from datetime import datetime, timedelta
import pandas as pd
import numpy as np
from typing import Dict, List, Tuple, Optional

# Configurar logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class AnalisadorTendenciaTKU:
    """Analisa tend√™ncias de pre√ßos TKU por micro-regi√£o ao longo do tempo"""
    
    def __init__(self, data_path: str = "sample_data.xlsx"):
        self.data_path = data_path
        self.df = None
        self.microregioes_disponiveis = []
        
    def carregar_dados(self) -> bool:
        """Carrega dados do Excel"""
        try:
            # Tentar m√∫ltiplos caminhos para o arquivo
            possible_paths = [
                self.data_path,
                f"../{self.data_path}",
                f"../../{self.data_path}",
                "sample_data.xlsx",
                "../sample_data.xlsx",
                "../../sample_data.xlsx"
            ]
            
            file_found = False
            for path in possible_paths:
                if os.path.exists(path):
                    logger.info(f"Arquivo encontrado em: {path}")
                    self.data_path = path
                    file_found = True
                    break
            
            if not file_found:
                logger.error("Arquivo sample_data.xlsx n√£o encontrado!")
                return False
            
            # Carregar dados
            self.df = pd.read_excel(self.data_path)
            logger.info(f"Dados carregados: {len(self.df)} linhas")
            
            # Preparar dados
            self._preparar_dados()
            return True
            
        except Exception as e:
            logger.error(f"Erro ao carregar dados: {str(e)}")
            return False
    
    def _preparar_dados(self):
        """Prepara e limpa os dados"""
        # Mapeamento de colunas
        column_mapping = {
            '00.dt_doc_faturamento': 'data_faturamento',
            '00.nm_centro_origem_unidade': 'centro_origem',
            'dc_centro_unidade_descricao': 'descricao_centro',
            '00.nm_modal': 'modal',
            'nm_tipo_rodovia': 'tipo_rodovia',
            'nm_veiculo': 'tipo_veiculo',
            '01.Rota_UFOrigem_UFDestino': 'rota_uf',
            '01.Rota_MesoOrigem_MesoDestino': 'rota_mesoregiao',
            '01.Rota_MicroOrigem_MicroDestino': 'rota_microregiao',
            '01.Rota_MuniOrigem_MuniDestino': 'rota_municipio',
            'id_transportadora': 'transportadora',
            'Date': 'data',
            'id_fatura': 'fatura',
            'id_transporte': 'transporte',
            '02.01.00 - Volume (ton)': 'volume_ton',
            '02.01.01 - Frete Geral (BRL)': 'frete_brl',
            '02.01.02 - DISTANCIA (KM)': 'distancia_km',
            '02.03.00 - Pre√ßo_Frete Geral (BRL) / TON': 'preco_ton',
            '02.03.02 - Pre√ßo_Frete Geral (BRL / TON / KM)': 'preco_ton_km'
        }
        
        # Renomear colunas
        self.df = self.df.rename(columns=column_mapping)
        
        # Converter tipos
        self.df['data_faturamento'] = pd.to_datetime(self.df['data_faturamento'], errors='coerce')
        self.df['volume_ton'] = pd.to_numeric(self.df['volume_ton'], errors='coerce')
        self.df['distancia_km'] = pd.to_numeric(self.df['distancia_km'], errors='coerce')
        self.df['preco_ton_km'] = pd.to_numeric(self.df['preco_ton_km'], errors='coerce')
        
        # Filtrar dados v√°lidos
        self.df = self.df[
            (self.df['volume_ton'] > 0) & 
            (self.df['distancia_km'] > 0) & 
            (self.df['preco_ton_km'] > 0) &
            (self.df['data_faturamento'].notna())
        ].copy()
        
        # Extrair micro-regi√£o
        self.df['microregiao_origem'] = self.df['centro_origem'].apply(self._extrair_microregiao)
        
        # Criar per√≠odo mensal para an√°lise temporal
        self.df['ano_mes'] = self.df['data_faturamento'].dt.to_period('M')
        
        # Listar micro-regi√µes dispon√≠veis
        self.microregioes_disponiveis = sorted(self.df['microregiao_origem'].unique())
        
        logger.info(f"Dados preparados: {len(self.df)} linhas v√°lidas")
        logger.info(f"Micro-regi√µes identificadas: {len(self.microregioes_disponiveis)}")
        
        # Mostrar estat√≠sticas gerais
        print(f"\nüìä ESTAT√çSTICAS GERAIS:")
        print(f"   ‚Ä¢ Total de rotas: {len(self.df):,}")
        print(f"   ‚Ä¢ Per√≠odo: {self.df['ano_mes'].min()} a {self.df['ano_mes'].max()}")
        print(f"   ‚Ä¢ Pre√ßo m√©dio geral: R$ {self.df['preco_ton_km'].mean():.4f}/ton.km")
        print(f"   ‚Ä¢ Volume total: {self.df['volume_ton'].sum():,.1f} ton")
        print(f"   ‚Ä¢ Dist√¢ncia m√©dia: {self.df['distancia_km'].mean():.1f} km")
    
    def _extrair_microregiao(self, centro_origem: str) -> str:
        """Extrai micro-regi√£o do centro de origem"""
        if pd.isna(centro_origem):
            return "UNKNOWN"
        
        centro_str = str(centro_origem).upper()
        
        # Mapeamento de micro-regi√µes - Minas Gerais
        microregion_mapping = [
            ('JO√ÉO MONLEVADE', 'JO√ÉO MONLEVADE'),
            ('USINA MONLEVADE', 'JO√ÉO MONLEVADE'),
            ('USINA', 'ITABIRA'),  # Mapear USINA para ITABIRA
            ('ITABIRA', 'ITABIRA'),
            ('BELO HORIZONTE', 'BELO HORIZONTE'),
            ('CONTAGEM', 'CONTAGEM'),
            ('SABAR√Å', 'SABAR√Å'),
            ('SANTA LUZIA', 'SANTA LUZIA'),
            ('NOVA LIMA', 'NOVA LIMA'),
            ('BRUMADINHO', 'BRUMADINHO'),
            ('IBIRIT√â', 'IBIRIT√â'),
            ('BETIM', 'BETIM'),
            ('LAGOA SANTA', 'LAGOA SANTA'),
            ('VESPASIANO', 'VESPASIANO'),
            ('RIBEIR√ÉO DAS NEVES', 'RIBEIR√ÉO DAS NEVES'),
            ('CAET√â', 'CAET√â'),
            ('S√ÉO JOS√â DA LAPA', 'S√ÉO JOS√â DA LAPA'),
            ('FLORESTAL', 'FLORESTAL'),
            ('JABOTICATUBAS', 'JABOTICATUBAS'),
            ('MATEUS LEME', 'MATEUS LEME'),
            ('IGARAP√â', 'IGARAP√â'),
            ('S√ÉO JOAQUIM DE BICAS', 'S√ÉO JOAQUIM DE BICAS'),
            ('S√ÉO JOS√â DO GOIABAL', 'S√ÉO JOS√â DO GOIABAL'),
            ('MARAVILHAS', 'MARAVILHAS'),
            ('ON√áA DE PITANGUI', 'ON√áA DE PITANGUI'),
            ('PAR√Å DE MINAS', 'PAR√Å DE MINAS'),
            ('PITANGUI', 'PITANGUI'),
            ('CONCEI√á√ÉO DO MATO DENTRO', 'CONCEI√á√ÉO DO MATO DENTRO'),
            ('SANTANA DO PARA√çSO', 'SANTANA DO PARA√çSO'),
            ('CORONEL FABRICIANO', 'CORONEL FABRICIANO'),
            ('IPATINGA', 'IPATINGA'),
            ('TIM√ìTEO', 'TIM√ìTEO'),
            ('CARATINGA', 'CARATINGA'),
            ('INHAPIM', 'INHAPIM'),
            ('GOVERNADOR VALADARES', 'GOVERNADOR VALADARES'),
            ('TE√ìFILO OTONI', 'TE√ìFILO OTONI'),
            ('NANUC', 'NANUC'),
            ('S√ÉO JO√ÉO DEL REI', 'S√ÉO JO√ÉO DEL REI'),
            ('BARBACENA', 'BARBACENA'),
            ('CONSELHEIRO LAFAIETE', 'CONSELHEIRO LAFAIETE'),
            ('OURO PRETO', 'OURO PRETO'),
            ('MARIANA', 'MARIANA')
        ]
        
        for key, microregion in microregion_mapping:
            if key in centro_str:
                return microregion
        
        return centro_str

    def _extrair_microregiao_from_rota(self, rota: str) -> str:
        """Extrai micro-regi√£o da rota (formato: ORIGEM-DESTINO)"""
        if pd.isna(rota):
            return "UNKNOWN"
        
        rota_str = str(rota).upper()
        
        # Se a rota cont√©m "-", extrair a origem
        if "-" in rota_str:
            origem = rota_str.split("-")[0].strip()
        else:
            origem = rota_str
        
        # Mapeamento de micro-regi√µes - Minas Gerais
        microregion_mapping = [
            ('JO√ÉO MONLEVADE', 'JO√ÉO MONLEVADE'),
            ('USINA MONLEVADE', 'JO√ÉO MONLEVADE'),
            ('ITABIRA', 'ITABIRA'),
            ('BELO HORIZONTE', 'BELO HORIZONTE'),
            ('CONTAGEM', 'CONTAGEM'),
            ('SABAR√Å', 'SABAR√Å'),
            ('SANTA LUZIA', 'SANTA LUZIA'),
            ('NOVA LIMA', 'NOVA LIMA'),
            ('BRUMADINHO', 'BRUMADINHO'),
            ('IBIRIT√â', 'IBIRIT√â'),
            ('BETIM', 'BETIM'),
            ('LAGOA SANTA', 'LAGOA SANTA'),
            ('VESPASIANO', 'VESPASIANO'),
            ('RIBEIR√ÉO DAS NEVES', 'RIBEIR√ÉO DAS NEVES'),
            ('CAET√â', 'CAET√â'),
            ('S√ÉO JOS√â DA LAPA', 'S√ÉO JOS√â DA LAPA'),
            ('FLORESTAL', 'FLORESTAL'),
            ('JABOTICATUBAS', 'JABOTICATUBAS'),
            ('MATEUS LEME', 'MATEUS LEME'),
            ('IGARAP√â', 'IGARAP√â'),
            ('S√ÉO JOAQUIM DE BICAS', 'S√ÉO JOAQUIM DE BICAS'),
            ('S√ÉO JOS√â DO GOIABAL', 'S√ÉO JOS√â DO GOIABAL'),
            ('MARAVILHAS', 'MARAVILHAS'),
            ('ON√áA DE PITANGUI', 'ON√áA DE PITANGUI'),
            ('PAR√Å DE MINAS', 'PAR√Å DE MINAS'),
            ('PITANGUI', 'PITANGUI'),
            ('CONCEI√á√ÉO DO MATO DENTRO', 'CONCEI√á√ÉO DO MATO DENTRO'),
            ('SANTANA DO PARA√çSO', 'SANTANA DO PARA√çSO'),
            ('CORONEL FABRICIANO', 'CORONEL FABRICIANO'),
            ('IPATINGA', 'IPATINGA'),
            ('TIM√ìTEO', 'TIM√ìTEO'),
            ('CARATINGA', 'CARATINGA'),
            ('INHAPIM', 'INHAPIM'),
            ('GOVERNADOR VALADARES', 'GOVERNADOR VALADARES'),
            ('TE√ìFILO OTONI', 'TE√ìFILO OTONI'),
            ('NANUC', 'NANUC'),
            ('S√ÉO JO√ÉO DEL REI', 'S√ÉO JO√ÉO DEL REI'),
            ('BARBACENA', 'BARBACENA'),
            ('CONSELHEIRO LAFAIETE', 'CONSELHEIRO LAFAIETE'),
            ('OURO PRETO', 'OURO PRETO'),
            ('MARIANA', 'MARIANA')
        ]
        
        for key, microregion in microregion_mapping:
            if key in origem:
                return microregion
        
        return origem
    
    def analisar_tendencia_microregiao(self, microregiao: str, 
                                     periodo_meses: int = 12) -> Dict:
        """Analisa tend√™ncia de pre√ßos para uma micro-regi√£o espec√≠fica"""
        if microregiao not in self.microregioes_disponiveis:
            return {"erro": f"Micro-regi√£o '{microregiao}' n√£o encontrada"}
        
        # Filtrar dados da micro-regi√£o
        df_micro = self.df[self.df['microregiao_origem'] == microregiao].copy()
        
        if len(df_micro) == 0:
            return {"erro": f"Nenhum dado encontrado para micro-regi√£o '{microregiao}'"}
        
        # Calcular estat√≠sticas por per√≠odo
        stats_mensal = df_micro.groupby('ano_mes').agg({
            'preco_ton_km': ['mean', 'median', 'std', 'count'],
            'volume_ton': 'sum',
            'distancia_km': 'mean'
        }).round(4)
        
        # Flatten column names
        stats_mensal.columns = ['_'.join(col).strip() for col in stats_mensal.columns]
        
        # Reset index para facilitar an√°lise
        stats_mensal = stats_mensal.reset_index()
        stats_mensal['ano_mes_str'] = stats_mensal['ano_mes'].astype(str)
        
        # Ordenar por per√≠odo
        stats_mensal = stats_mensal.sort_values('ano_mes')
        
        # Calcular tend√™ncia linear
        if len(stats_mensal) >= 2:
            x = np.arange(len(stats_mensal))
            y = stats_mensal['preco_ton_km_mean'].values
            
            # Regress√£o linear
            slope, intercept = np.polyfit(x, y, 1)
            
            # Calcular R¬≤
            y_pred = slope * x + intercept
            r_squared = 1 - np.sum((y - y_pred) ** 2) / np.sum((y - np.mean(y)) ** 2)
            
            # Determinar dire√ß√£o da tend√™ncia
            if slope > 0.001:
                direcao = "AUMENTANDO"
                tendencia_forca = "FORTE" if abs(slope) > 0.01 else "MODERADA"
            elif slope < -0.001:
                direcao = "DIMINUINDO"
                tendencia_forca = "FORTE" if abs(slope) > 0.01 else "MODERADA"
            else:
                direcao = "EST√ÅVEL"
                tendencia_forca = "EST√ÅVEL"
            
            # Calcular pre√ßo recomendado
            preco_atual = stats_mensal['preco_ton_km_mean'].iloc[-1]
            preco_medio_geral = df_micro['preco_ton_km'].mean()
            
            if direcao == "AUMENTANDO":
                if preco_atual < preco_medio_geral:
                    preco_recomendado = preco_atual * 1.05  # Aumentar 5%
                    acao = "AUMENTAR"
                else:
                    preco_recomendado = preco_atual
                    acao = "MANTER"
            elif direcao == "DIMINUINDO":
                if preco_atual > preco_medio_geral:
                    preco_recomendado = preco_atual * 0.95  # Reduzir 5%
                    acao = "REDUZIR"
                else:
                    preco_recomendado = preco_atual
                    acao = "MANTER"
            else:
                preco_recomendado = preco_atual
                acao = "MANTER"
            
        else:
            slope = 0
            r_squared = 0
            direcao = "INSUFICIENTE_DADOS"
            tendencia_forca = "N/A"
            preco_recomendado = df_micro['preco_ton_km'].mean()
            acao = "ANALISAR_MAIS_DADOS"
        
        # √öltimos faturamentos
        ultimos_faturamentos = df_micro.nlargest(5, 'data_faturamento')[
            ['data_faturamento', 'preco_ton_km', 'volume_ton', 'distancia_km', 'rota_mesoregiao']
        ].copy()
        
        # Formatar datas
        ultimos_faturamentos['data_faturamento'] = ultimos_faturamentos['data_faturamento'].dt.strftime('%Y-%m-%d')
        
        # Estat√≠sticas gerais
        stats_geral = {
            'total_rotas': len(df_micro),
            'periodo_analise': f"{stats_mensal['ano_mes'].min()} a {stats_mensal['ano_mes'].max()}",
            'preco_medio_geral': round(df_micro['preco_ton_km'].mean(), 4),
            'preco_mediano_geral': round(df_micro['preco_ton_km'].median(), 4),
            'desvio_padrao_geral': round(df_micro['preco_ton_km'].std(), 4),
            'volume_total_ton': round(df_micro['volume_ton'].sum(), 2),
            'distancia_media_km': round(df_micro['distancia_km'].mean(), 2)
        }
        
        return {
            'microregiao': microregiao,
            'tendencia': {
                'direcao': direcao,
                'forca': tendencia_forca,
                'inclinacao': round(slope, 6),
                'r_quadrado': round(r_squared, 4),
                'confiabilidade': "ALTA" if r_squared > 0.7 else "M√âDIA" if r_squared > 0.4 else "BAIXA"
            },
            'precos': {
                'atual': round(stats_mensal['preco_ton_km_mean'].iloc[-1], 4),
                'recomendado': round(preco_recomendado, 4),
                'acao': acao,
                'diferenca_percentual': round(((preco_recomendado - stats_mensal['preco_ton_km_mean'].iloc[-1]) / stats_mensal['preco_ton_km_mean'].iloc[-1]) * 100, 2)
            },
            'estatisticas_gerais': stats_geral,
            'evolucao_mensal': stats_mensal.to_dict('records'),
            'ultimos_faturamentos': ultimos_faturamentos.to_dict('records')
        }
    
    def gerar_relatorio_completo(self, output_path: str = "outputs"):
        """Gera relat√≥rio completo de todas as micro-regi√µes"""
        os.makedirs(output_path, exist_ok=True)
        
        print(f"\nüìä Analisando tend√™ncias para {len(self.microregioes_disponiveis)} micro-regi√µes...")
        
        resultados = {}
        resumo = []
        
        for i, microregiao in enumerate(self.microregioes_disponiveis, 1):
            print(f"  [{i:2d}/{len(self.microregioes_disponiveis)}] Analisando: {microregiao}")
            resultado = self.analisar_tendencia_microregiao(microregiao)
            
            if 'erro' not in resultado:
                resultados[microregiao] = resultado
                
                # Adicionar ao resumo
                resumo.append({
                    'microregiao': microregiao,
                    'tendencia': resultado['tendencia']['direcao'],
                    'forca': resultado['tendencia']['forca'],
                    'preco_atual': resultado['precos']['atual'],
                    'preco_recomendado': resultado['precos']['recomendado'],
                    'acao': resultado['precos']['acao'],
                    'confiabilidade': resultado['tendencia']['confiabilidade'],
                    'total_rotas': resultado['estatisticas_gerais']['total_rotas'],
                    'diferenca_percentual': resultado['precos']['diferenca_percentual']
                })
        
        # Criar DataFrame de resumo
        df_resumo = pd.DataFrame(resumo)
        
        # Ordenar por diferen√ßa percentual (maior impacto primeiro)
        df_resumo = df_resumo.sort_values('diferenca_percentual', ascending=False)
        
        # Salvar resultados
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        
        # Salvar resumo em Excel
        excel_path = os.path.join(output_path, f"tendencia_tku_resumo_{timestamp}.xlsx")
        with pd.ExcelWriter(excel_path, engine='openpyxl', mode='w') as writer:
            df_resumo.to_excel(writer, sheet_name='Resumo', index=False)
            
            # Adicionar detalhes por micro-regi√£o
            for microregiao, resultado in resultados.items():
                if 'erro' not in resultado:
                    # Dados mensais
                    df_mensal = pd.DataFrame(resultado['evolucao_mensal'])
                    df_mensal.to_excel(writer, sheet_name=f'{microregiao[:20]}_Mensal', index=False)
                    
                    # √öltimos faturamentos
                    df_faturamentos = pd.DataFrame(resultado['ultimos_faturamentos'])
                    df_faturamentos.to_excel(writer, sheet_name=f'{microregiao[:20]}_Faturamentos', index=False)
        
        # Salvar JSON completo
        json_path = os.path.join(output_path, f"tendencia_tku_completo_{timestamp}.json")
        import json
        with open(json_path, 'w', encoding='utf-8') as f:
            json.dump(resultados, f, ensure_ascii=False, indent=2, default=str)
        
        # Mostrar resumo dos resultados
        print(f"\nüìã RESUMO DAS TEND√äNCIAS:")
        print("=" * 80)
        print(f"{'Micro-regi√£o':<25} {'Tend√™ncia':<12} {'Pre√ßo Atual':<12} {'Recomendado':<12} {'A√ß√£o':<10} {'Impacto':<8}")
        print("=" * 80)
        
        for _, row in df_resumo.iterrows():
            impacto_emoji = "üî¥" if abs(row['diferenca_percentual']) > 5 else "üü°" if abs(row['diferenca_percentual']) > 2 else "üü¢"
            print(f"{row['microregiao']:<25} {row['tendencia']:<12} R${row['preco_atual']:<11} R${row['preco_recomendado']:<11} {row['acao']:<10} {impacto_emoji}")
        
        print("=" * 80)
        print(f"üî¥ Impacto ALTO (>5%) | üü° Impacto M√âDIO (2-5%) | üü¢ Impacto BAIXO (<2%)")
        
        logger.info(f"Relat√≥rio salvo em: {excel_path}")
        logger.info(f"JSON completo salvo em: {json_path}")
        
        return {
            'excel_path': excel_path,
            'json_path': json_path,
            'resumo': df_resumo,
            'resultados': resultados
        }

    def gerar_resumo_oportunidades(self, periodo_meses: int = 12) -> pd.DataFrame:
        """
        Gera resumo de oportunidades de redu√ß√£o de custos por rota
        Baseado no dashboard do operador com corte temporal configur√°vel
        
        Args:
            periodo_meses: Per√≠odo de an√°lise em meses (3, 6 ou 12)
        """
        logger.info(f"Gerando resumo de oportunidades para {periodo_meses} meses...")
        
        # Calcular data de corte
        data_atual = self.df['data_faturamento'].max()
        data_corte = data_atual - pd.DateOffset(months=periodo_meses)
        
        # Filtrar dados pelo per√≠odo
        df_periodo = self.df[self.df['data_faturamento'] >= data_corte].copy()
        
        if len(df_periodo) == 0:
            logger.warning(f"Nenhum dado encontrado para o per√≠odo de {periodo_meses} meses")
            return pd.DataFrame()
        
        logger.info(f"Dados filtrados para {periodo_meses} meses: {len(df_periodo)} linhas")
        
        # Agrupar por rota (apenas destino, como no script Spark)
        df_rotas = df_periodo.groupby(['rota_microregiao']).agg({
            'volume_ton': 'sum',
            'distancia_km': 'mean',
            'preco_ton_km': 'mean',
            'frete_brl': 'sum'
        }).reset_index()
        
        # Adicionar microregiao_origem baseada no centro_origem (primeiro valor encontrado)
        df_rotas['microregiao_origem'] = df_rotas['rota_microregiao'].apply(
            lambda x: self._extrair_microregiao_from_rota(x)
        )
        
        # Calcular custo superior (TKU)
        df_rotas['custo_sup_tku'] = df_rotas['preco_ton_km']
        
        # Calcular pre√ßo m√©dio por micro-regi√£o de origem para o per√≠odo
        # Usar a mesma l√≥gica de extra√ß√£o de micro-regi√£o
        df_periodo['microregiao_origem_temp'] = df_periodo['centro_origem'].apply(self._extrair_microregiao)
        preco_medio_microregiao = df_periodo.groupby('microregiao_origem_temp')['preco_ton_km'].mean().reset_index()
        preco_medio_microregiao = preco_medio_microregiao.rename(columns={
            'microregiao_origem_temp': 'microregiao_origem',
            'preco_ton_km': 'preco_medio_microregiao'
        })
        
        # Mesclar com pre√ßos m√©dios
        df_rotas = df_rotas.merge(
            preco_medio_microregiao, 
            on='microregiao_origem', 
            how='left'
        )
        
        # Calcular oportunidade (diferen√ßa entre custo atual e refer√™ncia)
        df_rotas['oportunidade_brl_ton_km'] = df_rotas['custo_sup_tku'] - df_rotas['preco_medio_microregiao']
        
        # Determinar a√ß√£o baseada na oportunidade
        def determinar_acao(oportunidade):
            if oportunidade > 0.01:  # Mais de 1 centavo de diferen√ßa
                return "Redu√ß√£o"
            elif oportunidade < -0.01:
                return "Aumento"
            else:
                return "Manter"
        
        df_rotas['acao'] = df_rotas['oportunidade_brl_ton_km'].apply(determinar_acao)
        
        # Calcular impacto estrat√©gico
        def calcular_impacto(oportunidade, volume, distancia):
            if pd.isna(oportunidade) or pd.isna(volume) or pd.isna(distancia):
                return "BAIXO"
            
            impacto_score = abs(oportunidade) * volume * distancia / 1000000
            
            if impacto_score > 1000:
                return "ALTO"
            elif impacto_score > 100:
                return "M√âDIO"
            else:
                return "BAIXO"
        
        df_rotas['impacto_estrategico'] = df_rotas.apply(
            lambda row: calcular_impacto(
                row['oportunidade_brl_ton_km'], 
                row['volume_ton'], 
                row['distancia_km']
            ), axis=1
        )
        
        # Adicionar informa√ß√µes temporais
        df_rotas['periodo_analise'] = f"{periodo_meses} meses"
        df_rotas['data_inicio'] = data_corte.strftime('%Y-%m-%d')
        df_rotas['data_fim'] = data_atual.strftime('%Y-%m-%d')
        
        # Ordenar por volume (maior impacto primeiro)
        df_rotas = df_rotas.sort_values('volume_ton', ascending=False)
        
        # Selecionar colunas para o dashboard
        df_dashboard = df_rotas[[
            'rota_microregiao',
            'microregiao_origem',
            'volume_ton',
            'distancia_km',
            'custo_sup_tku',
            'preco_medio_microregiao',
            'oportunidade_brl_ton_km',
            'acao',
            'impacto_estrategico',
            'periodo_analise',
            'data_inicio',
            'data_fim'
        ]].copy()
        
        # Renomear colunas para o dashboard
        df_dashboard = df_dashboard.rename(columns={
            'rota_microregiao': 'Rota',
            'microregiao_origem': 'Micro-Regi√£o Origem',
            'volume_ton': 'Volume (TON)',
            'distancia_km': 'Dist√¢ncia (KM)',
            'custo_sup_tku': 'Custo Sup (TKU)',
            'preco_medio_microregiao': '04.01 - M√©dia MicroRegi√£o - Pre√ßo SUP (BRL/TON/KM)',
            'oportunidade_brl_ton_km': 'Oport. (BRL/TON/KM)',
            'acao': 'A√ß√£o',
            'impacto_estrategico': 'Impacto Estrat√©gico',
            'periodo_analise': 'Per√≠odo An√°lise',
            'data_inicio': 'Data In√≠cio',
            'data_fim': 'Data Fim'
        })
        
        logger.info(f"Resumo de oportunidades gerado para {periodo_meses} meses: {len(df_dashboard)} rotas")
        return df_dashboard
    
    def gerar_resumo_oportunidades_multiplos_periodos(self) -> Dict[str, pd.DataFrame]:
        """
        Gera resumo de oportunidades para m√∫ltiplos per√≠odos (3, 6 e 12 meses)
        """
        logger.info("Gerando resumos de oportunidades para m√∫ltiplos per√≠odos...")
        
        periodos = [3, 6, 12]
        resultados = {}
        
        for periodo in periodos:
            df_periodo = self.gerar_resumo_oportunidades(periodo)
            if len(df_periodo) > 0:
                resultados[f"{periodo}_meses"] = df_periodo
                logger.info(f"Per√≠odo {periodo} meses: {len(df_periodo)} rotas")
            else:
                logger.warning(f"Per√≠odo {periodo} meses: sem dados")
        
        return resultados
    
    def salvar_dashboard_oportunidades_multiplos_periodos(self, output_path: str = "outputs/dashboard_oportunidades_multiplos_periodos.xlsx"):
        """
        Salva o dashboard de oportunidades para m√∫ltiplos per√≠odos em Excel
        """
        try:
            # Criar diret√≥rio se n√£o existir
            os.makedirs(os.path.dirname(output_path), exist_ok=True)
            
            # Gerar resumos para m√∫ltiplos per√≠odos
            resultados = self.gerar_resumo_oportunidades_multiplos_periodos()
            
            if not resultados:
                logger.error("Nenhum resultado gerado para m√∫ltiplos per√≠odos")
                return None
            
            # Salvar em Excel com m√∫ltiplas abas
            with pd.ExcelWriter(output_path, engine='openpyxl') as writer:
                for periodo, df_periodo in resultados.items():
                    sheet_name = f"Oportunidades_{periodo}"
                    df_periodo.to_excel(writer, sheet_name=sheet_name, index=False)
                    
                    # Aplicar formata√ß√£o
                    workbook = writer.book
                    worksheet = writer.sheets[sheet_name]
                    
                    # Formatar cabe√ßalho
                    from openpyxl.styles import Font, PatternFill, Alignment
                    header_fill = PatternFill(start_color="366092", end_color="366092", fill_type="solid")
                    header_font = Font(color="FFFFFF", bold=True)
                    
                    for cell in worksheet[1]:
                        cell.fill = header_fill
                        cell.font = header_font
                        cell.alignment = Alignment(horizontal="center")
                    
                    # Formatar coluna de oportunidade (vermelho para valores positivos)
                    for row in range(2, len(df_periodo) + 2):
                        oportunidade_cell = worksheet.cell(row=row, column=6)  # Coluna Oportunidade
                        if oportunidade_cell.value and oportunidade_cell.value > 0:
                            oportunidade_cell.font = Font(color="FF0000", bold=True)
                    
                    # Ajustar largura das colunas
                    for column in worksheet.columns:
                        max_length = 0
                        column_letter = column[0].column_letter
                        for cell in column:
                            try:
                                if len(str(cell.value)) > max_length:
                                    max_length = len(str(cell.value))
                            except:
                                pass
                        adjusted_width = min(max_length + 2, 50)
                        worksheet.column_dimensions[column_letter].width = adjusted_width
                
                # Criar aba de resumo comparativo
                df_resumo_comparativo = self._criar_resumo_comparativo_periodos(resultados)
                if len(df_resumo_comparativo) > 0:
                    df_resumo_comparativo.to_excel(writer, sheet_name='Resumo_Comparativo', index=False)
                    
                    # Formatar aba de resumo
                    worksheet_resumo = writer.sheets['Resumo_Comparativo']
                    for cell in worksheet_resumo[1]:
                        cell.fill = header_fill
                        cell.font = header_font
                        cell.alignment = Alignment(horizontal="center")
            
            logger.info(f"Dashboard multi-per√≠odo salvo em: {output_path}")
            return output_path
            
        except Exception as e:
            logger.error(f"Erro ao salvar dashboard multi-per√≠odo: {str(e)}")
            return None
    
    def _criar_resumo_comparativo_periodos(self, resultados: Dict[str, pd.DataFrame]) -> pd.DataFrame:
        """
        Cria resumo comparativo entre os diferentes per√≠odos
        """
        resumos = []
        
        for periodo, df_periodo in resultados.items():
            if len(df_periodo) == 0:
                continue
                
            # Estat√≠sticas por per√≠odo
            total_rotas = len(df_periodo)
            rotas_reducao = len(df_periodo[df_periodo['A√ß√£o'] == 'Redu√ß√£o'])
            rotas_aumento = len(df_periodo[df_periodo['A√ß√£o'] == 'Aumento'])
            rotas_manter = len(df_periodo[df_periodo['A√ß√£o'] == 'Manter'])
            
            # Volume total e oportunidades
            volume_total = df_periodo['Volume (TON)'].sum()
            oportunidades_reducao = df_periodo[df_periodo['A√ß√£o'] == 'Redu√ß√£o']['Oport. (BRL/TON/KM)'].sum()
            
            resumos.append({
                'Per√≠odo': periodo,
                'Total Rotas': total_rotas,
                'Rotas Redu√ß√£o': rotas_reducao,
                'Rotas Aumento': rotas_aumento,
                'Rotas Manter': rotas_manter,
                'Volume Total (TON)': volume_total,
                'Oportunidades Redu√ß√£o (BRL/TON/KM)': oportunidades_reducao,
                'Taxa Redu√ß√£o (%)': (rotas_reducao / total_rotas * 100) if total_rotas > 0 else 0
            })
        
        return pd.DataFrame(resumos)

def main():
    """Fun√ß√£o principal"""
    print("üöÄ Iniciando An√°lise de Tend√™ncia de Pre√ßos TKU")
    print("=" * 60)
    
    # Inicializar analisador
    analisador = AnalisadorTendenciaTKU()
    
    # Carregar dados
    if not analisador.carregar_dados():
        print("‚ùå Erro ao carregar dados. Verifique o arquivo sample_data.xlsx")
        return
    
    # Gerar relat√≥rio completo automaticamente
    print(f"\nüéØ Gerando relat√≥rio completo de tend√™ncias...")
    resultado = analisador.gerar_relatorio_completo()
    
    # Gerar dashboard de oportunidades
    print(f"\nüìä Gerando dashboard de oportunidades...")
    dashboard_path = analisador.salvar_dashboard_oportunidades_multiplos_periodos()
    
    if dashboard_path:
        print(f"‚úÖ Dashboard de oportunidades salvo em: {dashboard_path}")
        
        # Mostrar resumo das oportunidades
        df_oportunidades = analisador.gerar_resumo_oportunidades_multiplos_periodos()
        
        print(f"\nüéØ RESUMO DE OPORTUNIDADES:")
        print(f"   ‚Ä¢ Total de rotas analisadas: {len(df_oportunidades)}")
        
        # Contar a√ß√µes
        acoes = df_oportunidades['A√ß√£o'].value_counts()
        for acao, count in acoes.items():
            print(f"   ‚Ä¢ {acao}: {count} rotas")
        
        # Top 5 maiores oportunidades de redu√ß√£o
        df_reducao = df_oportunidades[df_oportunidades['A√ß√£o'] == 'Redu√ß√£o'].sort_values('Oport. (BRL/TON/KM)', ascending=False)
        if len(df_reducao) > 0:
            print(f"\nüî• TOP 5 OPORTUNIDADES DE REDU√á√ÉO:")
            for i, (_, row) in enumerate(df_reducao.head(5).iterrows(), 1):
                print(f"   {i}. {row['Centro Origem']}: R$ {row['Oport. (BRL/TON/KM)']:.4f} "
                      f"(Volume: {row['Volume (TON)']:,.1f} ton)")
        
        # Distribui√ß√£o por impacto
        impacto_dist = df_oportunidades['Impacto Estrat√©gico'].value_counts()
        print(f"\nüìà DISTRIBUI√á√ÉO POR IMPACTO:")
        for impacto, count in impacto_dist.items():
            print(f"   ‚Ä¢ {impacto}: {count} rotas")
    
    print(f"\n‚úÖ An√°lise conclu√≠da!")
    print(f"üìÅ Relat√≥rio Excel: {resultado['excel_path']}")
    print(f"üìÑ Dados JSON: {resultado['json_path']}")
    
    # Estat√≠sticas finais
    df_resumo = resultado['resumo']
    total_aumentar = len(df_resumo[df_resumo['acao'] == 'AUMENTAR'])
    total_reduzir = len(df_resumo[df_resumo['acao'] == 'REDUZIR'])
    total_manter = len(df_resumo[df_resumo['acao'] == 'MANTER'])
    
    print(f"\nüìä RESUMO FINAL:")
    print(f"   ‚Ä¢ Micro-regi√µes analisadas: {len(df_resumo)}")
    print(f"   ‚Ä¢ Recomenda√ß√µes AUMENTAR: {total_aumentar}")
    print(f"   ‚Ä¢ Recomenda√ß√µes REDUZIR: {total_reduzir}")
    print(f"   ‚Ä¢ Recomenda√ß√µes MANTER: {total_manter}")
    
    # Top 5 maiores oportunidades
    print(f"\nüî• TOP 5 MAIORES OPORTUNIDADES:")
    for i, (_, row) in enumerate(df_resumo.head(5).iterrows(), 1):
        print(f"   {i}. {row['microregiao']}: {row['acao']} {row['diferenca_percentual']:+.1f}% "
              f"(R$ {row['preco_atual']:.4f} ‚Üí R$ {row['preco_recomendado']:.4f})")

if __name__ == "__main__":
    main()
