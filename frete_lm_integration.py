#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Integra√ß√£o entre Modelo de Frete e LM Studio
Permite usar o modelo ML para c√°lculos e gerar prompts para LM Studio
"""

import pickle
import numpy as np
import json
import os
from typing import Dict, List, Any, Optional

class FreteLMIntegration:
    """
    Classe para integrar modelo de frete com LM Studio
    """
    
    def __init__(self, model_path: str = "models/frete_predictor.pkl"):
        """Inicializar com modelo treinado"""
        try:
            with open(model_path, 'rb') as f:
                model_data = pickle.load(f)
            
            self.model = model_data['model']
            self.scaler = model_data['scaler']
            self.label_encoders = model_data['label_encoders']
            self.feature_names = model_data['feature_names']
            
            print("‚úÖ Modelo de frete carregado com sucesso!")
            
        except Exception as e:
            print(f"‚ùå Erro ao carregar modelo: {e}")
            raise
    
    def predict_frete(self, volume_ton: float, distancia_km: float, mes: int, 
                     trimestre: int, ano: int, modal: str, tipo_rodovia: str, 
                     tipo_veiculo: str) -> float:
        """
        Fazer previs√£o de frete
        
        Args:
            volume_ton: Volume em toneladas
            distancia_km: Dist√¢ncia em quil√¥metros
            mes: M√™s (1-12)
            trimestre: Trimestre (1-4)
            ano: Ano
            modal: Modal de transporte
            tipo_rodovia: Tipo de rodovia
            tipo_veiculo: Tipo de ve√≠culo
        
        Returns:
            Pre√ßo por ton/km previsto
        """
        try:
            # Features num√©ricas
            X_numeric = np.array([[volume_ton, distancia_km, mes, trimestre, ano]])
            
            # Codificar features categ√≥ricas
            modal_encoded = self.label_encoders['modal'].transform([modal])[0]
            rodovia_encoded = self.label_encoders['tipo_rodovia'].transform([tipo_rodovia])[0]
            veiculo_encoded = self.label_encoders['tipo_veiculo'].transform([tipo_veiculo])[0]
            
            # Combinar features
            X = np.hstack([X_numeric, np.array([[modal_encoded, rodovia_encoded, veiculo_encoded]])])
            
            # Normalizar
            X_scaled = self.scaler.transform(X)
            
            # Prever
            prediction = self.model.predict(X_scaled)[0]
            return prediction
            
        except Exception as e:
            print(f"‚ùå Erro na previs√£o: {e}")
            return None
    
    def get_frete_insights(self, volume_ton: float, distancia_km: float, 
                          modal: str, tipo_rodovia: str, tipo_veiculo: str) -> Dict[str, Any]:
        """
        Obter insights completos sobre o frete
        
        Args:
            volume_ton: Volume em toneladas
            distancia_km: Dist√¢ncia em quil√¥metros
            modal: Modal de transporte
            tipo_rodovia: Tipo de rodovia
            tipo_veiculo: Tipo de ve√≠culo
        
        Returns:
            Dicion√°rio com insights, pre√ßos e recomenda√ß√µes
        """
        # Fazer previs√£o
        prediction = self.predict_frete(volume_ton, distancia_km, 6, 2, 2024, 
                                      modal, tipo_rodovia, tipo_veiculo)
        
        if prediction is None:
            return None
        
        # Calcular pre√ßo total
        preco_total = prediction * volume_ton * distancia_km
        
        # Gerar insights
        insights = {
            'preco_ton_km': prediction,
            'preco_total': preco_total,
            'volume_ton': volume_ton,
            'distancia_km': distancia_km,
            'modal': modal,
            'tipo_rodovia': tipo_rodovia,
            'tipo_veiculo': tipo_veiculo,
            'recomendacoes': [],
            'alertas': [],
            'oportunidades': []
        }
        
        # An√°lise de volume
        if volume_ton > 100:
            insights['recomendacoes'].append("Volume alto - considere modal ferrovi√°rio para economia")
            insights['oportunidades'].append("Negociar contratos de longo prazo com transportadoras")
        elif volume_ton < 25:
            insights['recomendacoes'].append("Volume baixo - modal rodovi√°rio √© mais adequado")
            insights['alertas'].append("Custo por ton pode ser alto devido ao volume baixo")
        
        # An√°lise de dist√¢ncia
        if distancia_km > 1000:
            insights['recomendacoes'].append("Dist√¢ncia longa - avalie modal ferrovi√°rio ou aquavi√°rio")
            insights['oportunidades'].append("Consolidar cargas para otimizar custos")
        elif distancia_km < 100:
            insights['recomendacoes'].append("Dist√¢ncia curta - modal rodovi√°rio √© ideal")
        
        # An√°lise de modal
        if modal == "RODOVIARIO" and distancia_km > 800:
            insights['alertas'].append("Dist√¢ncia alta para modal rodovi√°rio - considere alternativas")
        elif modal == "FERROVIARIO" and distancia_km < 300:
            insights['alertas'].append("Dist√¢ncia baixa para modal ferrovi√°rio - pode n√£o ser vi√°vel")
        
        # An√°lise de rodovia
        if tipo_rodovia == "PEDAGIO" and distancia_km > 500:
            insights['recomendacoes'].append("Avaliar rotas alternativas para reduzir custos de ped√°gio")
        
        # An√°lise de ve√≠culo
        if tipo_veiculo == "TRUCK" and volume_ton > 80:
            insights['recomendacoes'].append("Volume alto para truck - considere carreta ou m√∫ltiplos ve√≠culos")
        
        return insights
    
    def generate_lm_prompt(self, user_question: str, insights: Dict[str, Any]) -> str:
        """
        Gerar prompt otimizado para LM Studio
        
        Args:
            user_question: Pergunta do usu√°rio
            insights: Insights do modelo de frete
        
        Returns:
            Prompt formatado para LM Studio
        """
        prompt = f"""
AN√ÅLISE DE FRETE - RESULTADO DO MODELO ML

PERGUNTA DO USU√ÅRIO: {user_question}

DADOS DO MODELO ML:
- Pre√ßo por ton/km: R$ {insights['preco_ton_km']:.4f}
- Pre√ßo total: R$ {insights['preco_total']:.2f}
- Volume: {insights['volume_ton']} toneladas
- Dist√¢ncia: {insights['distancia_km']} km
- Modal: {insights['modal']}
- Tipo de rodovia: {insights['tipo_rodovia']}
- Tipo de ve√≠culo: {insights['tipo_veiculo']}

AN√ÅLISE AUTOM√ÅTICA:
- Recomenda√ß√µes: {', '.join(insights['recomendacoes']) if insights['recomendacoes'] else 'Nenhuma recomenda√ß√£o espec√≠fica'}
- Alertas: {', '.join(insights['alertas']) if insights['alertas'] else 'Nenhum alerta'}
- Oportunidades: {', '.join(insights['oportunidades']) if insights['oportunidades'] else 'Nenhuma oportunidade identificada'}

INSTRU√á√ïES PARA LM STUDIO:
Baseado nos dados acima, forne√ßa:
1. An√°lise detalhada da situa√ß√£o
2. Recomenda√ß√µes pr√°ticas e acion√°veis
3. Compara√ß√£o com alternativas
4. Estrat√©gias de otimiza√ß√£o
5. Pr√≥ximos passos recomendados

Responda de forma t√©cnica mas acess√≠vel, sempre referenciando os dados do modelo ML.
"""
        return prompt
    
    def create_frete_report(self, insights: Dict[str, Any]) -> str:
        """
        Criar relat√≥rio completo de frete
        
        Args:
            insights: Insights do modelo
        
        Returns:
            Relat√≥rio formatado
        """
        report = f"""
üöõ RELAT√ìRIO DE AN√ÅLISE DE FRETE
{'='*50}

üìä DADOS B√ÅSICOS:
   ‚Ä¢ Volume: {insights['volume_ton']} toneladas
   ‚Ä¢ Dist√¢ncia: {insights['distancia_km']} km
   ‚Ä¢ Modal: {insights['modal']}
   ‚Ä¢ Rodovia: {insights['tipo_rodovia']}
   ‚Ä¢ Ve√≠culo: {insights['tipo_veiculo']}

üí∞ AN√ÅLISE DE CUSTOS:
   ‚Ä¢ Pre√ßo por ton/km: R$ {insights['preco_ton_km']:.4f}
   ‚Ä¢ Pre√ßo total do frete: R$ {insights['preco_total']:.2f}

üéØ RECOMENDA√á√ïES:
"""
        
        if insights['recomendacoes']:
            for i, rec in enumerate(insights['recomendacoes'], 1):
                report += f"   {i}. {rec}\n"
        else:
            report += "   ‚Ä¢ Nenhuma recomenda√ß√£o espec√≠fica\n"
        
        report += f"""
‚ö†Ô∏è ALERTAS:
"""
        
        if insights['alertas']:
            for i, alerta in enumerate(insights['alertas'], 1):
                report += f"   {i}. {alerta}\n"
        else:
            report += "   ‚Ä¢ Nenhum alerta identificado\n"
        
        report += f"""
üí° OPORTUNIDADES:
"""
        
        if insights['oportunidades']:
            for i, op in enumerate(insights['oportunidades'], 1):
                report += f"   {i}. {op}\n"
        else:
            report += "   ‚Ä¢ Nenhuma oportunidade espec√≠fica identificada\n"
        
        report += f"""
üìà PR√ìXIMOS PASSOS:
1. Validar previs√£o com dados hist√≥ricos
2. Comparar com cota√ß√µes de mercado
3. Implementar recomenda√ß√µes priorit√°rias
4. Monitorar resultados e ajustar estrat√©gia

{'='*50}
Relat√≥rio gerado automaticamente pelo modelo ML
"""
        
        return report

def main():
    """Fun√ß√£o principal para demonstra√ß√£o"""
    try:
        # Inicializar integra√ß√£o
        integration = FreteLMIntegration()
        
        print("üéØ DEMONSTRA√á√ÉO DA INTEGRA√á√ÉO FRETE + LM STUDIO")
        print("="*60)
        
        # Mostrar valores dispon√≠veis nos encoders
        print("\nüìã VALORES DISPON√çVEIS NOS ENCODERS:")
        print(f"   Modal: {integration.label_encoders['modal'].classes_}")
        print(f"   Rodovia: {integration.label_encoders['tipo_rodovia'].classes_}")
        print(f"   Ve√≠culo: {integration.label_encoders['tipo_veiculo'].classes_}")
        
        # Exemplo 1: An√°lise b√°sica com valores corretos
        print("\nüìä EXEMPLO 1: An√°lise de frete rodovi√°rio")
        insights1 = integration.get_frete_insights(
            volume_ton=75,
            distancia_km=600,
            modal="Spot",
            tipo_rodovia="Rodovia",
            tipo_veiculo="Truck"
        )
        
        if insights1:
            print(f"   Pre√ßo por ton/km: R$ {insights1['preco_ton_km']:.4f}")
            print(f"   Pre√ßo total: R$ {insights1['preco_total']:.2f}")
            print(f"   Recomenda√ß√µes: {len(insights1['recomendacoes'])}")
        
        # Exemplo 2: An√°lise com carreta
        print("\nüìä EXEMPLO 2: An√°lise de frete com carreta")
        insights2 = integration.get_frete_insights(
            volume_ton=150,
            distancia_km=1200,
            modal="Spot",
            tipo_rodovia="Rodovia",
            tipo_veiculo="Carreta"
        )
        
        if insights2:
            print(f"   Pre√ßo por ton/km: R$ {insights2['preco_ton_km']:.4f}")
            print(f"   Pre√ßo total: R$ {insights2['preco_total']:.2f}")
            print(f"   Recomenda√ß√µes: {len(insights2['recomendacoes'])}")
        
        # Exemplo 3: Gerar prompt para LM Studio
        print("\nüìù EXEMPLO 3: Prompt para LM Studio")
        if insights1:
            prompt = integration.generate_lm_prompt(
                "Como otimizar este frete de 75 ton por 600 km?",
                insights1
            )
            print("   Prompt gerado com sucesso!")
            print(f"   Tamanho: {len(prompt)} caracteres")
        
        # Exemplo 4: Relat√≥rio completo
        print("\nüìã EXEMPLO 4: Relat√≥rio completo")
        if insights1:
            report = integration.create_frete_report(insights1)
            print("   Relat√≥rio gerado com sucesso!")
            print(f"   Tamanho: {len(report)} caracteres")
        
        print("\n‚úÖ Demonstra√ß√£o conclu√≠da com sucesso!")
        print("\nüöÄ PR√ìXIMOS PASSOS:")
        print("1. Use get_frete_insights() para an√°lises")
        print("2. Use generate_lm_prompt() para LM Studio")
        print("3. Use create_frete_report() para relat√≥rios")
        print("4. Integre com sua aplica√ß√£o preferida")
        
    except Exception as e:
        print(f"‚ùå Erro na demonstra√ß√£o: {e}")

if __name__ == "__main__":
    main()
